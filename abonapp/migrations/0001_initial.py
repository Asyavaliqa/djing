# -*- coding: utf-8 -*-
# Generated by Django 1.11 on 2018-02-26 00:20
from __future__ import unicode_literals

import bitfield.models
from django.conf import settings
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
from djing import lib
import re


class Migration(migrations.Migration):
    initial = True

    dependencies = [
        ('devapp', '0001_initial'),
        ('group_app', '0001_initial'),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
        ('accounts_app', '0001_initial'),
        ('tariff_app', '0001_initial'),
    ]

    operations = [
        migrations.CreateModel(
            name='Abon',
            fields=[
                ('baseaccount_ptr',
                 models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True,
                                      primary_key=True, serialize=False, to='accounts_app.BaseAccount')),
                ('ballance', models.FloatField(default=0.0)),
                ('ip_address', lib.MyGenericIPAddressField(blank=True, max_length=8, null=True, protocol='ipv4')),
                ('description', models.TextField(blank=True, null=True, verbose_name='Comment')),
                ('house', models.CharField(blank=True, max_length=12, null=True, verbose_name='House')),
                ('is_dynamic_ip', models.BooleanField(default=False)),
                ('markers', bitfield.models.BitField((('icon_donkey', 'Donkey'), ('icon_fire', 'Fire'),
                                                      ('icon_ok', 'Ok'), ('icon_king', 'King'), ('icon_tv', 'TV'),
                                                      ('icon_smile', 'Smile'), ('icon_dollar', 'Dollar'),
                                                      ('icon_service', 'Service'), ('icon_mrk', 'Marker')), default=0)),
            ],
            options={
                'verbose_name': 'Abon',
                'verbose_name_plural': 'Abons',
                'db_table': 'abonent',
                'ordering': ['fio'],
                'permissions': (('can_buy_tariff', 'Buy service perm'), ('can_view_passport', 'Can view passport'),
                                ('can_add_ballance', 'fill account'), ('can_ping', 'Can ping')),
            },
            bases=('accounts_app.baseaccount',),
        ),
        migrations.CreateModel(
            name='AbonLog',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('amount', models.FloatField(default=0.0)),
                ('comment', models.CharField(max_length=128)),
                ('date', models.DateTimeField(auto_now_add=True)),
            ],
            options={
                'db_table': 'abonent_log',
                'ordering': ['-date'],
                'permissions': (('can_view_abonlog', 'Can view subscriber logs'),),
            },
        ),
        migrations.CreateModel(
            name='AbonStreet',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=64)),
                ('group', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='group_app.Group')),
            ],
            options={
                'verbose_name': 'Street',
                'verbose_name_plural': 'Streets',
                'db_table': 'abon_street',
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='AbonTariff',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('time_start', models.DateTimeField(blank=True, default=None, null=True)),
                ('deadline', models.DateTimeField(blank=True, default=None, null=True)),
                ('tariff', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='linkto_tariff',
                                             to='tariff_app.Tariff')),
            ],
            options={
                'verbose_name': 'Abon service',
                'verbose_name_plural': 'Abon services',
                'db_table': 'abonent_tariff',
                'ordering': ['time_start'],
                'permissions': (('can_complete_service', 'finish service perm'),),
            },
        ),
        migrations.CreateModel(
            name='AdditionalTelephone',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('telephone', models.CharField(max_length=16, validators=[
                    django.core.validators.RegexValidator('^\\+[7,8,9,3]\\d{10,11}$')], verbose_name='Telephone')),
                ('owner_name', models.CharField(max_length=127)),
            ],
            options={
                'verbose_name': 'Additional telephone',
                'verbose_name_plural': 'Additional telephones',
                'db_table': 'additional_telephones',
                'ordering': ('owner_name',),
                'permissions': (('can_view_additionaltelephones', 'Can view additional telephones'),),
            },
        ),
        migrations.CreateModel(
            name='AllPayLog',
            fields=[
                ('pay_id', models.CharField(max_length=64, primary_key=True, serialize=False)),
                ('date_action', models.DateTimeField(auto_now_add=True)),
                ('summ', models.FloatField(default=0.0)),
                ('pay_system_name', models.CharField(max_length=16)),
            ],
            options={
                'db_table': 'all_pay_log',
                'ordering': ['-date_action'],
            },
        ),
        migrations.CreateModel(
            name='AllTimePayLog',
            fields=[
                ('pay_id', models.CharField(max_length=36, primary_key=True, serialize=False, unique=True)),
                ('date_add', models.DateTimeField(auto_now_add=True)),
                ('summ', models.FloatField(default=0.0)),
                ('trade_point',
                 models.CharField(blank=True, default=None, max_length=20, null=True, verbose_name='Trade point')),
                ('receipt_num', models.BigIntegerField(default=0, verbose_name='Receipt number')),
            ],
            options={
                'db_table': 'all_time_pay_log',
                'ordering': ['-date_add'],
            },
        ),
        migrations.CreateModel(
            name='ExtraFieldsModel',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(default='no title', max_length=16)),
                ('field_type', models.CharField(
                    choices=[('int', 'Digital field'), ('str', 'Text field'), ('dbl', 'Floating field'),
                             ('ipa', 'Ip Address')], default='str', max_length=3)),
                ('data', models.CharField(blank=True, max_length=64, null=True)),
            ],
            options={
                'db_table': 'abon_extra_fields',
            },
        ),
        migrations.CreateModel(
            name='InvoiceForPayment',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('status', models.BooleanField(default=False)),
                ('amount', models.FloatField(default=0.0)),
                ('comment', models.CharField(max_length=128)),
                ('date_create', models.DateTimeField(auto_now_add=True)),
                ('date_pay', models.DateTimeField(blank=True, null=True)),
            ],
            options={
                'verbose_name': 'Debt',
                'verbose_name_plural': 'Debts',
                'db_table': 'abonent_inv_pay',
                'ordering': ('date_create',),
                'permissions': (('can_view_invoiceforpayment', 'Can view invoice for payment'),),
            },
        ),
        migrations.CreateModel(
            name='PassportInfo',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('series', models.CharField(max_length=4, validators=[
                    django.core.validators.RegexValidator(re.compile('^-?\\d+\\Z', 32), code='invalid',
                                                          message='Enter a valid integer.')])),
                ('number', models.CharField(max_length=6, validators=[
                    django.core.validators.RegexValidator(re.compile('^-?\\d+\\Z', 32), code='invalid',
                                                          message='Enter a valid integer.')])),
                ('distributor', models.CharField(max_length=64)),
                ('date_of_acceptance', models.DateField()),
            ],
            options={
                'verbose_name': 'Passport Info',
                'verbose_name_plural': 'Passport Info',
                'db_table': 'passport_info',
            },
        ),
        migrations.CreateModel(
            name='PeriodicPayForId',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('last_pay', models.DateTimeField(blank=True, null=True, verbose_name='Last pay time')),
                ('next_pay', models.DateTimeField(verbose_name='Next time to pay')),
            ],
            options={
                'db_table': 'periodic_pay_for_id',
            },
        ),
        migrations.CreateModel(
            name='AbonRawPassword',
            fields=[
                ('account',
                 models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, primary_key=True, serialize=False,
                                      to='abonapp.Abon')),
                ('passw_text', models.CharField(max_length=64)),
            ],
            options={
                'db_table': 'abon_raw_password',
            },
        ),
        migrations.AddField(
            model_name='periodicpayforid',
            name='account',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='abonapp.Abon',
                                    verbose_name='Account'),
        ),
        migrations.AddField(
            model_name='periodicpayforid',
            name='periodic_pay',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='tariff_app.PeriodicPay',
                                    verbose_name='Periodic pay'),
        ),
        migrations.AddField(
            model_name='passportinfo',
            name='abon',
            field=models.OneToOneField(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL,
                                       to='abonapp.Abon'),
        ),
        migrations.AddField(
            model_name='invoiceforpayment',
            name='abon',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='abonapp.Abon'),
        ),
        migrations.AddField(
            model_name='invoiceforpayment',
            name='author',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL,
                                    related_name='+', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='alltimepaylog',
            name='abon',
            field=models.ForeignKey(blank=True, default=None, null=True,
                                    on_delete=django.db.models.deletion.SET_DEFAULT, to='abonapp.Abon'),
        ),
        migrations.AddField(
            model_name='additionaltelephone',
            name='abon',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='additional_telephones',
                                    to='abonapp.Abon'),
        ),
        migrations.AddField(
            model_name='abonlog',
            name='abon',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='abonapp.Abon'),
        ),
        migrations.AddField(
            model_name='abonlog',
            name='author',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE,
                                    related_name='+', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='abon',
            name='current_tariff',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL,
                                    to='abonapp.AbonTariff'),
        ),
        migrations.AddField(
            model_name='abon',
            name='dev_port',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL,
                                    to='devapp.Port'),
        ),
        migrations.AddField(
            model_name='abon',
            name='device',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL,
                                    to='devapp.Device'),
        ),
        migrations.AddField(
            model_name='abon',
            name='extra_fields',
            field=models.ManyToManyField(blank=True, to='abonapp.ExtraFieldsModel'),
        ),
        migrations.AddField(
            model_name='abon',
            name='group',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL,
                                    to='group_app.Group', verbose_name='User group'),
        ),
        migrations.AddField(
            model_name='abon',
            name='street',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL,
                                    to='abonapp.AbonStreet', verbose_name='Street'),
        ),
    ]

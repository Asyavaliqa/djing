# -*- coding: utf-8 -*-
# Generated by Django 1.9 on 2017-09-04 16:15
from __future__ import unicode_literals

from django.conf import settings
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import mydefs
import re


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('devapp', '0001_squashed_0007_auto_20170816_1109'),
        ('tariff_app', '0002_tariff_descr'),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
        ('accounts_app', '0001_initial'),
        ('tariff_app', '0001_initial'),
    ]

    operations = [
        migrations.CreateModel(
            name='Abon',
            fields=[
                ('userprofile_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to=settings.AUTH_USER_MODEL)),
                ('ballance', models.FloatField(default=0.0, validators=[django.core.validators.DecimalValidator])),
                ('address', models.CharField(max_length=256)),
            ],
            options={
                'db_table': 'abonent',
            },
            bases=('accounts_app.userprofile',),
        ),
        migrations.CreateModel(
            name='AbonGroup',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=127, unique=True)),
            ],
            options={
                'db_table': 'abonent_groups',
            },
        ),
        migrations.CreateModel(
            name='AbonLog',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('amount', models.FloatField(default=0.0)),
                ('comment', models.CharField(max_length=128)),
                ('date', models.DateTimeField(auto_now_add=True)),
                ('abon', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='abonapp.Abon')),
                ('author', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='+', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'abonent_log',
            },
        ),
        migrations.CreateModel(
            name='AbonTariff',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('tariff_priority', models.PositiveSmallIntegerField(default=0)),
                ('time_start', models.DateTimeField(blank=True, default=None, null=True)),
                ('abon', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='abonapp.Abon')),
                ('tariff', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='linkto_tariff', to='tariff_app.Tariff')),
            ],
            options={
                'ordering': ('tariff_priority',),
                'db_table': 'abonent_tariff',
            },
        ),
        migrations.CreateModel(
            name='InvoiceForPayment',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('status', models.BooleanField(default=False)),
                ('amount', models.FloatField(default=0.0)),
                ('comment', models.CharField(max_length=128)),
                ('date_create', models.DateTimeField(auto_now_add=True)),
                ('date_pay', models.DateTimeField(blank=True, null=True)),
                ('abon', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='abonapp.Abon')),
                ('author', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ('date_create',),
                'db_table': 'abonent_inv_pay',
            },
        ),
        migrations.AddField(
            model_name='abon',
            name='current_tariffs',
            field=models.ManyToManyField(through='abonapp.AbonTariff', to='tariff_app.Tariff'),
        ),
        migrations.AddField(
            model_name='abon',
            name='group',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='abonapp.AbonGroup'),
        ),
        migrations.AlterUniqueTogether(
            name='abontariff',
            unique_together=set([('abon', 'tariff', 'tariff_priority')]),
        ),
        migrations.AddField(
            model_name='abongroup',
            name='profiles',
            field=models.ManyToManyField(blank=True, related_name='abon_groups', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AlterModelOptions(
            name='abon',
            options={'permissions': (('can_buy_tariff', 'Покупка тарифа абоненту'),)},
        ),
        migrations.AlterModelOptions(
            name='abongroup',
            options={'permissions': (('can_add_ballance', 'Пополнение счёта'),)},
        ),
        migrations.AlterModelOptions(
            name='abontariff',
            options={'ordering': ('tariff_priority',), 'permissions': (('can_complete_service', 'Досрочное завершение услуги абонента'), ('can_activate_service', 'Активация услуги абонента'))},
        ),
        migrations.CreateModel(
            name='AbonStreet',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=64)),
                ('group', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='abonapp.AbonGroup')),
            ],
        ),
        migrations.RemoveField(
            model_name='abon',
            name='address',
        ),
        migrations.AddField(
            model_name='abon',
            name='description',
            field=models.TextField(blank=True, null=True),
        ),
        migrations.AddField(
            model_name='abon',
            name='house',
            field=models.CharField(blank=True, max_length=12, null=True),
        ),
        migrations.AddField(
            model_name='abon',
            name='street',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='abonapp.AbonStreet'),
        ),
        migrations.CreateModel(
            name='AllPayLog',
            fields=[
                ('pay_id', models.CharField(max_length=64, primary_key=True, serialize=False)),
                ('date_action', models.DateTimeField(auto_now_add=True)),
                ('summ', models.FloatField(default=0.0)),
                ('pay_system_name', models.CharField(max_length=16)),
            ],
            options={
                'db_table': 'all_pay_log',
                'ordering': ('date_action',),
            },
        ),
        migrations.CreateModel(
            name='AllTimePayLog',
            fields=[
                ('pay_id', models.CharField(max_length=36, primary_key=True, serialize=False, unique=True)),
                ('date_add', models.DateTimeField(auto_now_add=True)),
                ('summ', models.FloatField(default=0.0)),
            ],
            options={
                'db_table': 'all_time_pay_log',
                'ordering': ('date_add',),
            },
        ),
        migrations.CreateModel(
            name='AbonRawPassword',
            fields=[
                ('account', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, primary_key=True, serialize=False, to='abonapp.Abon')),
                ('passw_text', models.CharField(max_length=64)),
            ],
            options={
                'db_table': 'abon_raw_password',
            },
        ),
        migrations.AlterModelTable(
            name='abonstreet',
            table='abon_street',
        ),
        migrations.AddField(
            model_name='abontariff',
            name='deadline',
            field=models.DateTimeField(blank=True, default=None, null=True),
        ),
        migrations.CreateModel(
            name='ExtraFieldsModel',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('field_type', models.CharField(choices=[('int', 'Цифровое поле'), ('str', 'Текстовое поле'), ('dbl', 'Дробное с плавающей точкой'), ('ipa', 'IP Адрес')], default='str', max_length=3)),
                ('data', models.CharField(blank=True, max_length=64, null=True)),
                ('title', models.CharField(default='no title', max_length=16)),
            ],
            options={
                'db_table': 'abon_extra_fields',
            },
        ),
        migrations.AlterModelOptions(
            name='abon',
            options={'permissions': (('can_buy_tariff', 'Покупка тарифа абоненту'), ('can_view_passport', 'Can view passport'))},
        ),
        migrations.AlterModelOptions(
            name='abontariff',
            options={'ordering': ('tariff_priority',), 'permissions': (('can_complete_service', 'Снятие со счёта средств'), ('can_activate_service', 'Активация услуги абонента'))},
        ),
        migrations.AlterField(
            model_name='abon',
            name='ballance',
            field=models.FloatField(default=0.0),
        ),
        migrations.AlterModelOptions(
            name='abon',
            options={'permissions': (('can_buy_tariff', 'Покупка тарифа абоненту'), ('can_view_passport', 'Может просматривать паспортные данные'))},
        ),
        migrations.AddField(
            model_name='abon',
            name='extra_fields',
            field=models.ManyToManyField(blank=True, to='abonapp.ExtraFieldsModel'),
        ),
        migrations.AddField(
            model_name='abongroup',
            name='tariffs',
            field=models.ManyToManyField(blank=True, related_name='tariff_groups', to='tariff_app.Tariff'),
        ),
        migrations.CreateModel(
            name='PassportInfo',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('series', models.CharField(max_length=4, validators=[django.core.validators.RegexValidator(re.compile('^-?\\d+\\Z', 32), code='invalid', message='Enter a valid integer.')])),
                ('number', models.CharField(max_length=6, validators=[django.core.validators.RegexValidator(re.compile('^-?\\d+\\Z', 32), code='invalid', message='Enter a valid integer.')])),
                ('distributor', models.CharField(max_length=64)),
                ('date_of_acceptance', models.DateField()),
                ('abon', models.OneToOneField(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='abonapp.Abon')),
            ],
        ),
        migrations.CreateModel(
            name='AbonDevice',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('abon', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to='abonapp.Abon')),
                ('device', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to='devapp.Device')),
            ],
            options={
                'db_table': 'abon_device',
            },
        ),
        migrations.AlterUniqueTogether(
            name='abondevice',
            unique_together=set([('abon', 'device')]),
        ),
        migrations.AlterField(
            model_name='abondevice',
            name='abon',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='abonapp.Abon'),
        ),
        migrations.AlterField(
            model_name='abondevice',
            name='device',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='devapp.Device'),
        ),
        migrations.AddField(
            model_name='abon',
            name='ip_address',
            field=mydefs.MyGenericIPAddressField(blank=True, max_length=8, null=True, protocol='ipv4'),
        ),
        migrations.AddField(
            model_name='abon',
            name='dev_port',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='devapp.Port'),
        ),
        migrations.AddField(
            model_name='abon',
            name='device',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='devapp.Device'),
        ),
        migrations.AddField(
            model_name='abon',
            name='is_dynamic_ip',
            field=models.BooleanField(default=False),
        ),
        migrations.DeleteModel(
            name='AbonDevice',
        ),
        migrations.AlterModelOptions(
            name='abontariff',
            options={'permissions': (('can_complete_service', 'Снятие со счёта средств'),)},
        ),
        migrations.RemoveField(
            model_name='abon',
            name='current_tariffs',
        ),
        migrations.AddField(
            model_name='abon',
            name='current_tariff',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='abonapp.AbonTariff'),
        ),
        migrations.AlterUniqueTogether(
            name='abontariff',
            unique_together=set([]),
        ),
        migrations.RemoveField(
            model_name='abontariff',
            name='abon',
        ),
        migrations.RemoveField(
            model_name='abontariff',
            name='tariff_priority',
        ),
    ]
